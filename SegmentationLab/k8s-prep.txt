# --- Kubernetes --- #

sudo dhclient -r ens3 && sudo dhclient ens3

# --- Set Hostname - Needed for K8s node label ---
sudo hostnamectl set-hostname <choose-a-name-per-node>

sudo hostnamectl set-hostname k8s-master-01
sudo hostnamectl set-hostname k8s-worker-01
sudo hostnamectl set-hostname k8s-worker-02
sudo hostnamectl set-hostname k8s-worker-03
sudo hostnamectl set-hostname k8s-worker-04

# --- Apply change to current shell --- #
exec bash

# --- Step 1: Update and Upgrade APT ---
echo "Updating and upgrading apt packages..."
sudo apt update -y
sudo apt upgrade -y
sudo apt autoremove -y
sudo reboot
sudo apt-get install -y curl gnupg2 software-properties-common apt-transport-https ca-certificates

# --- Step 2: Disable Swap ---
# Kubernetes requires swap to be disabled for kubelet to function correctly.
echo "Disabling swap..."
sudo swapoff -a
# Remove swap entry from /etc/fstab to make the change persistent across reboots
sudo sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab

# Verify
sudo swapon --show
cat /etc/fstab | grep swap


# --- Step 3: Load Kernel Modules and Configure Sysctl Parameters ---
# These modules are required for Kubernetes networking (especially for CNI like Cilium).
echo "Loading kernel modules and configuring sysctl parameters..."
sudo modprobe overlay
sudo modprobe br_netfilter

# Add kernel modules to load at boot
cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
overlay
br_netfilter
EOF

# Verify
lsmod | grep overlay
lsmod | grep br_netfilter

# Configure sysctl parameters for Kubernetes networking
cat <<EOF | sudo tee /etc/sysctl.d/99-kubernetes.conf
net.bridge.bridge-nf-call-iptables  = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.ipv4.ip_forward                 = 1
EOF

# Apply sysctl parameters immediately
sudo sysctl --system

# Verify
sysctl net.bridge.bridge-nf-call-iptables
sysctl net.bridge.bridge-nf-call-ip6tables
sysctl net.ipv4.ip_forward


# --- Step 4: Install Container Runtime (Containerd) ---
# Kubernetes uses a container runtime to run containers. Containerd is a popular choice.
echo "Installing containerd..."


# Install containerd
sudo apt-get install -y containerd

# Configure containerd to use systemd cgroup driver
sudo mkdir -p /etc/containerd
sudo containerd config default | sudo tee /etc/containerd/config.toml >/dev/null

# Corrected sed command: using '#' as a delimiter instead of '/'
sudo sed -i 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml

# Ensure the pause image resolves from registry.k8s.io
sudo sed -i 's@sandbox_image = ".*"@sandbox_image = "registry.k8s.io/pause:3.9"@' /etc/containerd/config.toml

# Restart containerd service
sudo systemctl restart containerd
sudo systemctl enable containerd

# Verify
sudo systemctl status containerd
sudo cat /etc/containerd/config.toml | grep SystemdCgroup

# --- Step 5: Install kubeadm, kubelet, and kubectl ---
# These are the core Kubernetes tools for cluster management.
echo "Installing kubeadm, kubelet, and kubectl..."
# Add Kubernetes GPG key

sudo apt update
sudo mkdir -p /etc/apt/keyrings
curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg

# Add Kubernetes APT repository
echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list

# Update apt package index and install kubelet, kubeadm, kubectl
sudo apt update
sudo apt-get install -y kubelet=1.30.3-1.1 kubeadm=1.30.3-1.1 kubectl=1.30.3-1.1

# Verify
kubeadm version
kubelet --version
kubectl version --client

# Hold packages to prevent automatic upgrades that might break the cluster
sudo apt-mark hold kubelet kubeadm kubectl

# Verify
sudo apt-mark showhold

echo "Initial setup complete on this node. Please run these commands on ALL your Ubuntu 22.04 nodes."